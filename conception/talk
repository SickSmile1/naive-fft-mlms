hey,
i will talk today about displacement simulations with the boussinesq kernel.
ill start with a little real life example. 
{slide oat}
as you can see, few days ago i was cooking breakfast for the kids and the milk developed a skin while cooking.
when i put the oat on the milk, the skin got deformed.
so the question is:
how can we simulate the process of displacement? what do we need for that?

{slide oat 2}
lets look at the problem from the side. We want to calculate this deformation on the surface. 
we take a step back from the example and think of a solid, where we have displacement by pressure.

{slide grid}
First we need a grid to depict the surface and to measure the size of the pressure.
On the grid we need to have axes and the size of each grid point a, b.
with this setup we can find a way to calculate the displacement.

having our variables, lets look at the theory to calculate displacements.

{slide Boussinesq Kernel}
The equation you see on the left, is one possible solution to our problem.
The displacemen u can be calculated using the convolutional integral of the boussinesq kernel multiplied by the pressure.
The result of the kernel computation and the resulting displacement is dependent on the distance between 
two points on the grid.
i will introduce briefly three ways to obtain a calculated displacement matrix.

{slide naive}
First we tried the naive approach, where the integrals are computed by summation.
Here the displacement for one point is computed by summing up the pressure on every other grid node.
We get the expected result but, unfortunately this is rather slow and we need to try other ways to get the result.

We can try to use bigger a, b and less grid nodes, thereby the discretization size wil be diffrent and we will need less computations.

{slide MLMS}
The used approach is multi level multi summation. As the algorithm is to long to show here,
i will briefly introduce the concept.
As i said before, the idea is to take a coarser grid representations and use the naive summation equation to obtain a 
displacement matrix.
First we need a coarser representation of the pressure, then we can compute the displacement.
After these steps we can iteratively refine the displacement matrix to its initial fine grid.
This is done in three steps for each grid size. 
(a) we correct the displacement matrix 
(b) we interpolate the displacement matrix on a finer grid 
(c) we correct the refined displacement matrix 

depending on the grid size, the loop is performed several times.

{slide MLMS graphs}
here you can see the resulting matrixes produced by the algorithm in graphical representation.
the first graph is our initial pressure matrix. its a square patch with 2048 sqared gridnodes and a uniform pressure of 1.
on th right side is the coarsened pressure matrix with 93 squared grid nodes
beneath the initial pressure matrix is the coarse displacement matrix.
and on the lower righ is our solution: the resulting displacement matrix.

Before going further to the third way of computing the displacement, are there any questions?

{slide fft}
Another way to solve the problem is to compute the convolutional integral in fourier space.
here you can see the convolutional integral from before and the discretized version in fourier space.
to compute the fft algorithm, we still need to compute the boussinesq kernel, but the summation over all grid nodes is not needed.
The equation shown is for computing the kernel. we need our a, b here too, for the grid node size
and compute a matrix on the calculated m, n.
Next we double the size of the pressure and the kernel matrix and transform them into fourier space.

{slide FFT2}
after that, we perform the multiplication,
transform back to real space 
and take the first 1/4 of the resulting matrix, as the rest are decoupling images prduced by the fourier transformation.
We obtain the exact same result as with the naive summation equation.

now lets see what the computation times look like and how much we improved from the naive summation.

{slide tie complexity}
this is a loglog plot with time in ms and number of grid nodes on the axis
the dotted lines are for comparison, the upper black line is big o n squared and the lower black line is big o n log n 

as we can see, big o nsquared is approximately the scaling of the naive summation 
and the MLMS and FFT algorithms scale roughly the same with the red line, with big o of n log n 
both algorithms show some inconsistence, so are not on a straight line. for the FFT algorithm, this may be 
due to the sensitivity to prime numbers: if the grid lengh is a prime number, the computations may take longer.

For the MLMS, the inconsistence may be due to the way the grid size is chosen. There are two scalars influencing the sizes,
which grow with the grid size. As they need to be integer, the inconsistency may be due to rounding.

{if time: interpolation error}
y axis is the l2 norm, x axis is the one over the squared grid size.
The error we want to look at here is not the discretization error, but the error the MLMS algorithm does during refinement 
steps Interpolation, where the interpolation happens.
The error is influenced by the correction functions.

Thankyou for your attention.

